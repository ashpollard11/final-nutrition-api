{"version":3,"sources":["NumberRangeValidator.js"],"names":["NumberRangeValidator","selector","min","max","console","log","numericValue","parseFloat","$field","value","isNaN","errors","push","Validator"],"mappings":";;;;;;;;;;;;IAAMA,oB;;;AACL,+BAAYC,QAAZ,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAAA;;AACd;AADc,0IACzBF,QADyB;;AAE/BG,UAAQC,GAAR,CAAY,uCAAZ;AACA,QAAKH,GAAL,GAAWA,GAAX,CAH+B,CAGf;AAChB,QAAKC,GAAL,GAAWA,GAAX,CAJ+B,CAIf;AAJe;AAK/B;;;;6BAEU;AACV;;AAEA,OAAIG,eAAeC,WAAW,KAAKC,MAAL,CAAYC,KAAvB,CAAnB;AACA,OAAIC,MAAMJ,YAAN,CAAJ,EAAyB;AACxB,SAAKK,MAAL,CAAYC,IAAZ,CAAiB,gCAAjB;AACA;AACD,OAAIN,eAAe,KAAKJ,GAAxB,EAA6B;AAC5B,SAAKS,MAAL,CAAYC,IAAZ,CAAiB,kBAAjB;AACA;AACD,OAAIN,eAAe,KAAKH,GAAxB,EAA6B;AAC5B,SAAKQ,MAAL,CAAYC,IAAZ,CAAiB,kBAAjB;AACA;AACD;;;;EArBiCC,S","file":"NumberRangeValidator.js","sourcesContent":["class NumberRangeValidator extends Validator {\n\tconstructor(selector, min, max) {\n\t\tsuper(selector); //call constructor in validator()\n\t\tconsole.log('constructor from NumberRangeValidator')\n\t\tthis.min = min; //take arguments and put them into properties of the class\n\t\tthis.max = max; //take arguments and put them into properties of the class\n\t}\n\n\tvalidate() {\n\t\tsuper.validate();\n\n\t\tlet numericValue = parseFloat(this.$field.value);\n\t\tif (isNaN(numericValue)) {\n\t\t\tthis.errors.push(\"You must enter a numeric value\");\n\t\t}\n\t\tif (numericValue < this.min) {\n\t\t\tthis.errors.push(\"Value is invalid\");\n\t\t}\n\t\tif (numericValue > this.max) {\n\t\t\tthis.errors.push(\"Value is invalid\");\n\t\t}\n\t}\n}"]}